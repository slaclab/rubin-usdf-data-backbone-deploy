---
apiVersion: v1
kind: Service
metadata:
  name: redis
  labels:
    app: redis
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  ports:
  - name: redis
    port: 6379
    protocol: TCP
    targetPort: 6379
  selector:
    app: redis
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  labels:
    app: redis
spec:
  serviceName: redis
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      securityContext:
        fsGroup: 999
        runAsGroup: 999
        runAsNonRoot: true
        runAsUser: 999
      containers:
      - name: redis
        image: "docker.io/redis:7.0.8"
        command:
        - redis-server
        - '--appendonly'
        - 'yes'
        - '--requirepass'
        - $(REDIS_PASSWORD)
        env:
        - name: MASTER
          value: "true"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: redis-password
              name: redis
        livenessProbe:
          exec:
            command:
              - sh
              - '-c'
              - 'redis-cli -h $(hostname) -a $(REDIS_PASSWORD) incr health:counter'
          failureThreshold: 3
          initialDelaySeconds: 15
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          requests:
            cpu: 100m
            memory: 1Gi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - all
        ports:
        - containerPort: 6379
        volumeMounts:
        - mountPath: /data
          name: data
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce"]
      storageClassName: wekafs--sdf-k8s01
      resources:
        requests:
          storage: 10Gi
